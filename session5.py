import timefrom math import tan, pidef time_it(fn, *args, repetitions = 1, **kwargs):    start_time = time.time()    print('time_it', fn, args, kwargs)    for i in range(repetitions):        fn(*args, **kwargs)    end_time = time.time()    time_taken = end_time - start_time    return time_takendef squared_power_list(num, *, start, end):    squared_power_list = list()    # num = args[0]    # start = kwargs.get("start")    # end = kwargs.get("end")    if((not isinstance(num, int) and not isinstance(num, float)) or not isinstance(start, int) or not isinstance(end, int)):        raise ValueError("Invalid arguments type")    if (start > end):        raise ValueError("Invalid arguments start is greater than end")    for i in range(start, end + 1):        squared_power_list.append(pow(num, i))    return squared_power_listdef temp_converter(temp, temp_given_in):    # temp = args[0]    # temp_given_in = kwargs.get("temp_given_in")    threshold = {'f': -459.4, 'c': -273}    if(not isinstance(temp, int) or not isinstance(temp_given_in, str)):        raise ValueError("Invalid arguments type")    if(temp_given_in not in list(threshold.keys())):        raise ValueError("Invalid arguments Please input temp in f or c")    if(temp < threshold.get(temp_given_in)):        raise ValueError("Invalid arguments temperature below absolute zero")    if (temp_given_in == 'f'):        converted_temp = (temp - 32) * 5 / 9    elif(temp_given_in == 'c'):        converted_temp = (temp * 9 / 5) + 32    return converted_tempdef speed_converter(speed, dist, time):    # speed = args[0]    # dist = kwargs.get('dist')    # time = kwargs.get('time')    dist_conv_dict = {'km':1, 'm':1000, 'ft':3280.84, 'yrd':1093.61}    time_conv_dict = {'ms':3600000, 's':3600, 'm':60, 'hr':1, 'day':0.0417}    if((not isinstance(speed, int) and not isinstance(speed, float)) or not isinstance(dist, str) or not isinstance(time, str)):        raise ValueError("Invalid arguments type")    if (dist not in list(dist_conv_dict.keys()) or        time not in list(time_conv_dict.keys())):        raise ValueError("Invalid arguments unsupported unit")    if (speed < 0):        raise ValueError("Invalid arguments speed cannot be negative")    time_conversion = time_conv_dict.get(time)    dist_conversion = dist_conv_dict.get(dist)    converted_speed = speed * dist_conversion / time_conversion    print('speed_converter', converted_speed)    return converted_speeddef polygon_area(length, sides):    # length = args[0]    # sides = kwargs.get('sides')    if((not isinstance(length, int) and not isinstance(length, float)) or not isinstance(sides, int)):        raise ValueError("Invalid arguments type")    if (length < 0):        raise ValueError("Invalid arguments speed cannot be negative")    if (6 < sides or sides < 3):        raise ValueError("Invalid arguments sides has to be greater than 2 and less than 7")    print (length, sides)    area = sides * (length ** 2) / (4 * tan(pi / sides))    return area